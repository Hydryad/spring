--- luacheck: 0
---@diagnostic disable


--
>local function trim(s)
>   return (s:gsub("^%s*(.-)%s*$", "%1"))
> end

>local no_spaces = ldoc.no_spaces
>local use_li = ldoc.use_li
>local display_name = ldoc.display_name
>local iter = ldoc.modules.iter
>local M = ldoc.markup
>local localurl = module and module.name and ldoc.ref_to_module(module) or ("../" .. ldoc.output .. ".html")
>localurl = localurl:gsub("%.%./", "ldoc/")

>modname = module and module.name or "Home"
>local function M(txt,item) return ldoc.markup(txt,item,ldoc.html) end
---
layout: default
title: $(modname)
permalink: $(localurl)
description: $(module.name)
> local no_spaces = ldoc.no_spaces
> local nowrap = ldoc.wrap and '' or 'nowrap'
> if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
    $(ldoc.body)
> elseif module then -- module documentation
    $(ldoc.module_typename(module)) $(module.name)
    $(trim(M(module.summary,module)))
    $(trim(M(module.description,module)))
    $module
> end -- elseif module
> if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
    $(ldoc.body)
> elseif module then -- module documentation
    $(ldoc.module_typename(module)) $(module.name)
    $(trim(M(module.summary,module)))
    $(trim(M(module.description,module)))
> end -- elseif module

-- type branch
-- Either it is a function, a table, section (filter out probably),

>   for kind, items in module.kinds() do -- iterate over entire module, which is functionally a file.
    the module is: $(ldoc.module_typename(module)) --Print the type of the module, for example, teams, game end, etc.
        Category: $(trim(kind)) 
>           for item in items() do 
                function $(item.name) $(item.params.map()) end
>           end 
> end
